scalar Json
scalar DateTime
scalar Date
scalar Password

interface Node {
  id: ID!
}

interface Payload {
  status: Boolean!
  errors: [Errors]!
  output: Node!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

interface Connection {
  pageInfo: PageInfo!
}

interface Edge {
  cursor: String!
}

"An error message from the server"
type ErrorMessage {
  "A short code to be used in code"
  code: String
  "A human readable error message"
  message: String
}

type Errors {
  field: String
  errors: [ErrorsOrErrorMessage]
}

union ErrorsOrErrorMessage = Errors | ErrorMessage

type Email {
  address: String!
  verified: Boolean!
}

type User implements Node {
  id: ID!
  name: String
  username: String
  primaryEmail: Email
  emails: [Email!]
  # other generic account details
}

type registerPayload implements Payload {
  status: Boolean!
  errors: [Errors]!
  user: User
  output: Node!
}

input registerInput {
  username: String
}

enum ProviderTypeEnum {
  Scheduler
  Communicator
}

# this is something like Google Calendar, Slack, Discord etc..
type Provider implements Node {
  id: ID!
  type: ProviderTypeEnum!
  accounts: [Account!]!
}

# this is an individual account of a provider
type Account implements Node {
  id: ID!
  provider: Provider!
  email: Email
  name: String!
}

# This is an event on a calendar which may or may not have an associated nap
type Event implements Node {
  id: ID!
  nap: Nap
  start: DateTime
  end: DateTime
  name: String
  description: String
}

type EventConnection implements Connection {
  edges: [EventEdge]
  pageInfo: PageInfo!
}

type EventEdge implements Edge {
  cursor: String!
  node: Event
}

# A calendar of a user
type Calendar implements Node {
  id: ID!
  provider: Provider!
  events: EventConnection
  name: String
}

type NapConnection implements Connection {
  edges: [NapEdge]
  pageInfo: PageInfo!
}

type NapEdge implements Edge {
  cursor: String!
  node: Nap
}

# a nap! this what controls a snooze
type Nap implements Node {
  id: ID!
  start: DateTime
  end: DateTime
  icon: String
  status: String
  dnd: Boolean
  accounts: [Account!]!
  tags: [String]
}

input napInput {
  start: DateTime
  end: DateTime
  icon: String
  status: String
  dnd: Boolean
  event: ID
  accounts: [ID]
  tags: [String]
}

type napPayload implements Payload {
  status: Boolean!
  errors: [Errors]!
  nap: Nap
  output: Node!
}

type Query {
  registerStart: String
  me: User
  calendars: [Calendar]!
  naps: NapConnection
  nextNap: Nap
  accounts: [Account]!

  node(id: ID!): Node
}

type Mutation {
  # todo - define payloads & inputs
  register(input: registerInput): registerPayload!
  login: Boolean
  logout: Boolean

  addCalendar: String
  addAccount: String
  removeAccount: String
  createNap(input: napInput): napPayload!
  updateNap: String
}

schema {
  query: Query
  mutation: Mutation
}
